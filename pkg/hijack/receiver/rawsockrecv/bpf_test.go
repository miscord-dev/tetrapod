package rawsockrecv

import (
	"testing"

	"golang.org/x/net/bpf"
)

func TestInstructions(t *testing.T) {
	cases := []struct {
		name string
		port int
		pkt  []byte
		want int
	}{
		{
			name: "v4 disco",
			port: 54323,
			pkt: []byte{
				0x60, 0xbe, 0xb4, 0x03, 0x12, 0x21, 0x82, 0xc1, 0xe8, 0x5e, 0x80, 0xe2, 0x08, 0x00, 0x45, 0x00,
				0x00, 0x8d, 0x00, 0x00, 0x40, 0x00, 0x80, 0x11, 0x9b, 0x7b, 0x0a, 0x1c, 0x64, 0x72, 0xa0, 0xf8,
				0x4f, 0x5e, 0xd4, 0x32, 0xd4, 0x33, 0x00, 0x79, 0x2b, 0x07, 0x81, 0x94, 0x58, 0x97, 0x3c, 0x27,
				0x85, 0xae, 0x42, 0x9b, 0xa2, 0x4a, 0x70, 0xa6, 0x44, 0xcc, 0x30, 0x73, 0x01, 0xc7, 0xcd, 0x94,
				0x32, 0x85, 0x9d, 0x41, 0x89, 0x60, 0x45, 0xc2, 0x56, 0x64, 0x5a, 0x09, 0xec, 0xc4, 0x2c, 0x4c,
				0x01, 0x62, 0xdb, 0x96, 0xca, 0x5c, 0xaf, 0xb5, 0x50, 0x04, 0xa5, 0x9b, 0xe9, 0xa8, 0x48, 0x93,
				0x82, 0xec, 0x56, 0x1e, 0x69, 0xc2, 0xba, 0x52, 0x7c, 0x4d, 0x99, 0x90, 0x98, 0x99, 0xa2, 0x22,
				0x36, 0x2b, 0xca, 0xfb, 0xd3, 0xd7, 0x0b, 0x74, 0x70, 0xb4, 0x2e, 0x38, 0x97, 0x7f, 0xc4, 0x78,
				0x23, 0x96, 0x30, 0x5c, 0x53, 0x99, 0xde, 0x7e, 0xaf, 0xd0, 0x4e, 0x7c, 0x90, 0x8d, 0xad, 0x2c,
				0x72, 0x63, 0x06, 0x88, 0x9c, 0xeb, 0xca, 0xb2, 0xba, 0x82, 0x29,
			},
			want: 262144,
		},
		{
			name: "v4 disco port mismatch",
			port: 54322,
			pkt: []byte{
				0x60, 0xbe, 0xb4, 0x03, 0x12, 0x21, 0x82, 0xc1, 0xe8, 0x5e, 0x80, 0xe2, 0x08, 0x00, 0x45, 0x00,
				0x00, 0x8d, 0x00, 0x00, 0x40, 0x00, 0x80, 0x11, 0x9b, 0x7b, 0x0a, 0x1c, 0x64, 0x72, 0xa0, 0xf8,
				0x4f, 0x5e, 0xd4, 0x32, 0xd4, 0x33, 0x00, 0x79, 0x2b, 0x07, 0x81, 0x94, 0x58, 0x97, 0x3c, 0x27,
				0x85, 0xae, 0x42, 0x9b, 0xa2, 0x4a, 0x70, 0xa6, 0x44, 0xcc, 0x30, 0x73, 0x01, 0xc7, 0xcd, 0x94,
				0x32, 0x85, 0x9d, 0x41, 0x89, 0x60, 0x45, 0xc2, 0x56, 0x64, 0x5a, 0x09, 0xec, 0xc4, 0x2c, 0x4c,
				0x01, 0x62, 0xdb, 0x96, 0xca, 0x5c, 0xaf, 0xb5, 0x50, 0x04, 0xa5, 0x9b, 0xe9, 0xa8, 0x48, 0x93,
				0x82, 0xec, 0x56, 0x1e, 0x69, 0xc2, 0xba, 0x52, 0x7c, 0x4d, 0x99, 0x90, 0x98, 0x99, 0xa2, 0x22,
				0x36, 0x2b, 0xca, 0xfb, 0xd3, 0xd7, 0x0b, 0x74, 0x70, 0xb4, 0x2e, 0x38, 0x97, 0x7f, 0xc4, 0x78,
				0x23, 0x96, 0x30, 0x5c, 0x53, 0x99, 0xde, 0x7e, 0xaf, 0xd0, 0x4e, 0x7c, 0x90, 0x8d, 0xad, 0x2c,
				0x72, 0x63, 0x06, 0x88, 0x9c, 0xeb, 0xca, 0xb2, 0xba, 0x82, 0x29,
			},
			want: 0,
		},
	}

	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {
			vm, err := bpf.NewVM(generateInstructions(c.port))

			if err != nil {
				t.Fatal(err)
			}

			val, err := vm.Run(c.pkt)

			if err != nil {
				t.Fatal(err)
			}

			if val != c.want {
				t.Errorf("want = %d, got = %d", c.want, val)
			}
		})
	}
}
