// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_signalclient is a generated GoMock package.
package mock_signalclient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/miscord-dev/toxfu/proto"
)

// MockRecvCallbackInterface is a mock of RecvCallbackInterface interface.
type MockRecvCallbackInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecvCallbackInterfaceMockRecorder
}

// MockRecvCallbackInterfaceMockRecorder is the mock recorder for MockRecvCallbackInterface.
type MockRecvCallbackInterfaceMockRecorder struct {
	mock *MockRecvCallbackInterface
}

// NewMockRecvCallbackInterface creates a new mock instance.
func NewMockRecvCallbackInterface(ctrl *gomock.Controller) *MockRecvCallbackInterface {
	mock := &MockRecvCallbackInterface{ctrl: ctrl}
	mock.recorder = &MockRecvCallbackInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecvCallbackInterface) EXPECT() *MockRecvCallbackInterfaceMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockRecvCallbackInterface) Call(arg0 *proto.NodeRefreshResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Call", arg0)
}

// Call indicates an expected call of Call.
func (mr *MockRecvCallbackInterfaceMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRecvCallbackInterface)(nil).Call), arg0)
}
