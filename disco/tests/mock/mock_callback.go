// Code generated by MockGen. DO NOT EDIT.
// Source: callback.go

// Package mock_discotests is a generated GoMock package.
package mock_discotests

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	disco "github.com/miscord-dev/tetrapod/disco"
)

// MockDiscoPeerEndpointStatusCallback is a mock of DiscoPeerEndpointStatusCallback interface.
type MockDiscoPeerEndpointStatusCallback struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoPeerEndpointStatusCallbackMockRecorder
}

// MockDiscoPeerEndpointStatusCallbackMockRecorder is the mock recorder for MockDiscoPeerEndpointStatusCallback.
type MockDiscoPeerEndpointStatusCallbackMockRecorder struct {
	mock *MockDiscoPeerEndpointStatusCallback
}

// NewMockDiscoPeerEndpointStatusCallback creates a new mock instance.
func NewMockDiscoPeerEndpointStatusCallback(ctrl *gomock.Controller) *MockDiscoPeerEndpointStatusCallback {
	mock := &MockDiscoPeerEndpointStatusCallback{ctrl: ctrl}
	mock.recorder = &MockDiscoPeerEndpointStatusCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoPeerEndpointStatusCallback) EXPECT() *MockDiscoPeerEndpointStatusCallbackMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockDiscoPeerEndpointStatusCallback) Callback(status disco.DiscoPeerEndpointStatusReadOnly) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Callback", status)
}

// Callback indicates an expected call of Callback.
func (mr *MockDiscoPeerEndpointStatusCallbackMockRecorder) Callback(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockDiscoPeerEndpointStatusCallback)(nil).Callback), status)
}
