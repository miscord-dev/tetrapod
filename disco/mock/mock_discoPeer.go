// Code generated by MockGen. DO NOT EDIT.
// Source: discoPeer.go

// Package mock_disco is a generated GoMock package.
package mock_disco

import (
	netip "net/netip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	disco "github.com/miscord-dev/tetrapod/disco"
)

// MockDiscoPeer is a mock of DiscoPeer interface.
type MockDiscoPeer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoPeerMockRecorder
}

// MockDiscoPeerMockRecorder is the mock recorder for MockDiscoPeer.
type MockDiscoPeerMockRecorder struct {
	mock *MockDiscoPeer
}

// NewMockDiscoPeer creates a new mock instance.
func NewMockDiscoPeer(ctrl *gomock.Controller) *MockDiscoPeer {
	mock := &MockDiscoPeer{ctrl: ctrl}
	mock.recorder = &MockDiscoPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoPeer) EXPECT() *MockDiscoPeerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDiscoPeer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDiscoPeerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDiscoPeer)(nil).Close))
}

// EnqueueReceivedPacket mocks base method.
func (m *MockDiscoPeer) EnqueueReceivedPacket(pkt disco.EncryptedDiscoPacket) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueReceivedPacket", pkt)
}

// EnqueueReceivedPacket indicates an expected call of EnqueueReceivedPacket.
func (mr *MockDiscoPeerMockRecorder) EnqueueReceivedPacket(pkt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueReceivedPacket", reflect.TypeOf((*MockDiscoPeer)(nil).EnqueueReceivedPacket), pkt)
}

// SetEndpoints mocks base method.
func (m *MockDiscoPeer) SetEndpoints(endpoints []netip.AddrPort) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEndpoints", endpoints)
}

// SetEndpoints indicates an expected call of SetEndpoints.
func (mr *MockDiscoPeerMockRecorder) SetEndpoints(endpoints interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEndpoints", reflect.TypeOf((*MockDiscoPeer)(nil).SetEndpoints), endpoints)
}

// Status mocks base method.
func (m *MockDiscoPeer) Status() disco.DiscoPeerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(disco.DiscoPeerStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockDiscoPeerMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDiscoPeer)(nil).Status))
}

// MockDiscoPeerStatus is a mock of DiscoPeerStatus interface.
type MockDiscoPeerStatus struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoPeerStatusMockRecorder
}

// MockDiscoPeerStatusMockRecorder is the mock recorder for MockDiscoPeerStatus.
type MockDiscoPeerStatusMockRecorder struct {
	mock *MockDiscoPeerStatus
}

// NewMockDiscoPeerStatus creates a new mock instance.
func NewMockDiscoPeerStatus(ctrl *gomock.Controller) *MockDiscoPeerStatus {
	mock := &MockDiscoPeerStatus{ctrl: ctrl}
	mock.recorder = &MockDiscoPeerStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoPeerStatus) EXPECT() *MockDiscoPeerStatusMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDiscoPeerStatus) Get() disco.DiscoPeerStatusReadOnly {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(disco.DiscoPeerStatusReadOnly)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDiscoPeerStatusMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiscoPeerStatus)(nil).Get))
}

// NotifyStatus mocks base method.
func (m *MockDiscoPeerStatus) NotifyStatus(fn func(disco.DiscoPeerStatusReadOnly)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyStatus", fn)
}

// NotifyStatus indicates an expected call of NotifyStatus.
func (mr *MockDiscoPeerStatusMockRecorder) NotifyStatus(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStatus", reflect.TypeOf((*MockDiscoPeerStatus)(nil).NotifyStatus), fn)
}
