// Code generated by MockGen. DO NOT EDIT.
// Source: api_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/miscord-dev/toxfu/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockNodeAPIClient is a mock of NodeAPIClient interface.
type MockNodeAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAPIClientMockRecorder
}

// MockNodeAPIClientMockRecorder is the mock recorder for MockNodeAPIClient.
type MockNodeAPIClientMockRecorder struct {
	mock *MockNodeAPIClient
}

// NewMockNodeAPIClient creates a new mock instance.
func NewMockNodeAPIClient(ctrl *gomock.Controller) *MockNodeAPIClient {
	mock := &MockNodeAPIClient{ctrl: ctrl}
	mock.recorder = &MockNodeAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeAPIClient) EXPECT() *MockNodeAPIClientMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockNodeAPIClient) Refresh(ctx context.Context, opts ...grpc.CallOption) (proto.NodeAPI_RefreshClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Refresh", varargs...)
	ret0, _ := ret[0].(proto.NodeAPI_RefreshClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockNodeAPIClientMockRecorder) Refresh(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockNodeAPIClient)(nil).Refresh), varargs...)
}

// MockNodeAPI_RefreshClient is a mock of NodeAPI_RefreshClient interface.
type MockNodeAPI_RefreshClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAPI_RefreshClientMockRecorder
}

// MockNodeAPI_RefreshClientMockRecorder is the mock recorder for MockNodeAPI_RefreshClient.
type MockNodeAPI_RefreshClientMockRecorder struct {
	mock *MockNodeAPI_RefreshClient
}

// NewMockNodeAPI_RefreshClient creates a new mock instance.
func NewMockNodeAPI_RefreshClient(ctrl *gomock.Controller) *MockNodeAPI_RefreshClient {
	mock := &MockNodeAPI_RefreshClient{ctrl: ctrl}
	mock.recorder = &MockNodeAPI_RefreshClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeAPI_RefreshClient) EXPECT() *MockNodeAPI_RefreshClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockNodeAPI_RefreshClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNodeAPI_RefreshClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNodeAPI_RefreshClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNodeAPI_RefreshClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).Context))
}

// Header mocks base method.
func (m *MockNodeAPI_RefreshClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNodeAPI_RefreshClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockNodeAPI_RefreshClient) Recv() (*proto.NodeRefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.NodeRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNodeAPI_RefreshClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockNodeAPI_RefreshClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNodeAPI_RefreshClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockNodeAPI_RefreshClient) Send(arg0 *proto.NodeRefreshRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNodeAPI_RefreshClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockNodeAPI_RefreshClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNodeAPI_RefreshClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockNodeAPI_RefreshClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNodeAPI_RefreshClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNodeAPI_RefreshClient)(nil).Trailer))
}

// MockNodeAPIServer is a mock of NodeAPIServer interface.
type MockNodeAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAPIServerMockRecorder
}

// MockNodeAPIServerMockRecorder is the mock recorder for MockNodeAPIServer.
type MockNodeAPIServerMockRecorder struct {
	mock *MockNodeAPIServer
}

// NewMockNodeAPIServer creates a new mock instance.
func NewMockNodeAPIServer(ctrl *gomock.Controller) *MockNodeAPIServer {
	mock := &MockNodeAPIServer{ctrl: ctrl}
	mock.recorder = &MockNodeAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeAPIServer) EXPECT() *MockNodeAPIServerMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockNodeAPIServer) Refresh(arg0 proto.NodeAPI_RefreshServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockNodeAPIServerMockRecorder) Refresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockNodeAPIServer)(nil).Refresh), arg0)
}

// mustEmbedUnimplementedNodeAPIServer mocks base method.
func (m *MockNodeAPIServer) mustEmbedUnimplementedNodeAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNodeAPIServer")
}

// mustEmbedUnimplementedNodeAPIServer indicates an expected call of mustEmbedUnimplementedNodeAPIServer.
func (mr *MockNodeAPIServerMockRecorder) mustEmbedUnimplementedNodeAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNodeAPIServer", reflect.TypeOf((*MockNodeAPIServer)(nil).mustEmbedUnimplementedNodeAPIServer))
}

// MockUnsafeNodeAPIServer is a mock of UnsafeNodeAPIServer interface.
type MockUnsafeNodeAPIServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeNodeAPIServerMockRecorder
}

// MockUnsafeNodeAPIServerMockRecorder is the mock recorder for MockUnsafeNodeAPIServer.
type MockUnsafeNodeAPIServerMockRecorder struct {
	mock *MockUnsafeNodeAPIServer
}

// NewMockUnsafeNodeAPIServer creates a new mock instance.
func NewMockUnsafeNodeAPIServer(ctrl *gomock.Controller) *MockUnsafeNodeAPIServer {
	mock := &MockUnsafeNodeAPIServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeNodeAPIServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeNodeAPIServer) EXPECT() *MockUnsafeNodeAPIServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedNodeAPIServer mocks base method.
func (m *MockUnsafeNodeAPIServer) mustEmbedUnimplementedNodeAPIServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedNodeAPIServer")
}

// mustEmbedUnimplementedNodeAPIServer indicates an expected call of mustEmbedUnimplementedNodeAPIServer.
func (mr *MockUnsafeNodeAPIServerMockRecorder) mustEmbedUnimplementedNodeAPIServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedNodeAPIServer", reflect.TypeOf((*MockUnsafeNodeAPIServer)(nil).mustEmbedUnimplementedNodeAPIServer))
}

// MockNodeAPI_RefreshServer is a mock of NodeAPI_RefreshServer interface.
type MockNodeAPI_RefreshServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeAPI_RefreshServerMockRecorder
}

// MockNodeAPI_RefreshServerMockRecorder is the mock recorder for MockNodeAPI_RefreshServer.
type MockNodeAPI_RefreshServerMockRecorder struct {
	mock *MockNodeAPI_RefreshServer
}

// NewMockNodeAPI_RefreshServer creates a new mock instance.
func NewMockNodeAPI_RefreshServer(ctrl *gomock.Controller) *MockNodeAPI_RefreshServer {
	mock := &MockNodeAPI_RefreshServer{ctrl: ctrl}
	mock.recorder = &MockNodeAPI_RefreshServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeAPI_RefreshServer) EXPECT() *MockNodeAPI_RefreshServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockNodeAPI_RefreshServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNodeAPI_RefreshServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockNodeAPI_RefreshServer) Recv() (*proto.NodeRefreshRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.NodeRefreshRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNodeAPI_RefreshServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockNodeAPI_RefreshServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNodeAPI_RefreshServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockNodeAPI_RefreshServer) Send(arg0 *proto.NodeRefreshResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNodeAPI_RefreshServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockNodeAPI_RefreshServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockNodeAPI_RefreshServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockNodeAPI_RefreshServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNodeAPI_RefreshServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockNodeAPI_RefreshServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockNodeAPI_RefreshServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockNodeAPI_RefreshServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockNodeAPI_RefreshServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNodeAPI_RefreshServer)(nil).SetTrailer), arg0)
}
