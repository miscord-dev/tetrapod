// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeAPIClient is the client API for NodeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAPIClient interface {
	Refresh(ctx context.Context, opts ...grpc.CallOption) (NodeAPI_RefreshClient, error)
}

type nodeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAPIClient(cc grpc.ClientConnInterface) NodeAPIClient {
	return &nodeAPIClient{cc}
}

func (c *nodeAPIClient) Refresh(ctx context.Context, opts ...grpc.CallOption) (NodeAPI_RefreshClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeAPI_ServiceDesc.Streams[0], "/proto.NodeAPI/Refresh", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAPIRefreshClient{stream}
	return x, nil
}

type NodeAPI_RefreshClient interface {
	Send(*NodeRefreshRequest) error
	Recv() (*NodeRefreshResponse, error)
	grpc.ClientStream
}

type nodeAPIRefreshClient struct {
	grpc.ClientStream
}

func (x *nodeAPIRefreshClient) Send(m *NodeRefreshRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAPIRefreshClient) Recv() (*NodeRefreshResponse, error) {
	m := new(NodeRefreshResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeAPIServer is the server API for NodeAPI service.
// All implementations must embed UnimplementedNodeAPIServer
// for forward compatibility
type NodeAPIServer interface {
	Refresh(NodeAPI_RefreshServer) error
	mustEmbedUnimplementedNodeAPIServer()
}

// UnimplementedNodeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedNodeAPIServer struct {
}

func (UnimplementedNodeAPIServer) Refresh(NodeAPI_RefreshServer) error {
	return status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedNodeAPIServer) mustEmbedUnimplementedNodeAPIServer() {}

// UnsafeNodeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAPIServer will
// result in compilation errors.
type UnsafeNodeAPIServer interface {
	mustEmbedUnimplementedNodeAPIServer()
}

func RegisterNodeAPIServer(s grpc.ServiceRegistrar, srv NodeAPIServer) {
	s.RegisterService(&NodeAPI_ServiceDesc, srv)
}

func _NodeAPI_Refresh_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeAPIServer).Refresh(&nodeAPIRefreshServer{stream})
}

type NodeAPI_RefreshServer interface {
	Send(*NodeRefreshResponse) error
	Recv() (*NodeRefreshRequest, error)
	grpc.ServerStream
}

type nodeAPIRefreshServer struct {
	grpc.ServerStream
}

func (x *nodeAPIRefreshServer) Send(m *NodeRefreshResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAPIRefreshServer) Recv() (*NodeRefreshRequest, error) {
	m := new(NodeRefreshRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeAPI_ServiceDesc is the grpc.ServiceDesc for NodeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeAPI",
	HandlerType: (*NodeAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Refresh",
			Handler:       _NodeAPI_Refresh_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
