// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/miscord-dev/toxfu/persistent/ent/node"
	"github.com/miscord-dev/toxfu/persistent/ent/route"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Addr holds the value of the "addr" field.
	Addr string `json:"addr,omitempty"`
	// Bits holds the value of the "bits" field.
	Bits int `json:"bits,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RouteQuery when eager-loading is set.
	Edges       RouteEdges `json:"edges"`
	node_routes *int64
}

// RouteEdges holds the relations/edges for other nodes in the graph.
type RouteEdges struct {
	// Host holds the value of the host edge.
	Host *Node `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RouteEdges) HostOrErr() (*Node, error) {
	if e.loadedTypes[0] {
		if e.Host == nil {
			// The edge host was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: node.Label}
		}
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldID, route.FieldBits:
			values[i] = new(sql.NullInt64)
		case route.FieldAddr:
			values[i] = new(sql.NullString)
		case route.ForeignKeys[0]: // node_routes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Route", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int64(value.Int64)
		case route.FieldAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addr", values[i])
			} else if value.Valid {
				r.Addr = value.String
			}
		case route.FieldBits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bits", values[i])
			} else if value.Valid {
				r.Bits = int(value.Int64)
			}
		case route.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_routes", value)
			} else if value.Valid {
				r.node_routes = new(int64)
				*r.node_routes = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryHost queries the "host" edge of the Route entity.
func (r *Route) QueryHost() *NodeQuery {
	return (&RouteClient{config: r.config}).QueryHost(r)
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return (&RouteClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", addr=")
	builder.WriteString(r.Addr)
	builder.WriteString(", bits=")
	builder.WriteString(fmt.Sprintf("%v", r.Bits))
	builder.WriteByte(')')
	return builder.String()
}

// Routes is a parsable slice of Route.
type Routes []*Route

func (r Routes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
