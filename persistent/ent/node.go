// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/miscord-dev/toxfu/persistent/ent/node"
)

// Node is the model entity for the Node schema.
type Node struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey string `json:"public_key,omitempty"`
	// PublicDiscoKey holds the value of the "public_disco_key" field.
	PublicDiscoKey string `json:"public_disco_key,omitempty"`
	// HostName holds the value of the "host_name" field.
	HostName string `json:"host_name,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Goos holds the value of the "goos" field.
	Goos string `json:"goos,omitempty"`
	// Goarch holds the value of the "goarch" field.
	Goarch string `json:"goarch,omitempty"`
	// LastUpdatedAt holds the value of the "last_updated_at" field.
	LastUpdatedAt string `json:"last_updated_at,omitempty"`
	// State holds the value of the "state" field.
	State node.State `json:"state,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Node) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case node.FieldID:
			values[i] = new(sql.NullInt64)
		case node.FieldPublicKey, node.FieldPublicDiscoKey, node.FieldHostName, node.FieldOs, node.FieldGoos, node.FieldGoarch, node.FieldLastUpdatedAt, node.FieldState:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Node", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Node fields.
func (n *Node) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case node.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int64(value.Int64)
		case node.FieldPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value.Valid {
				n.PublicKey = value.String
			}
		case node.FieldPublicDiscoKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_disco_key", values[i])
			} else if value.Valid {
				n.PublicDiscoKey = value.String
			}
		case node.FieldHostName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_name", values[i])
			} else if value.Valid {
				n.HostName = value.String
			}
		case node.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				n.Os = value.String
			}
		case node.FieldGoos:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field goos", values[i])
			} else if value.Valid {
				n.Goos = value.String
			}
		case node.FieldGoarch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field goarch", values[i])
			} else if value.Valid {
				n.Goarch = value.String
			}
		case node.FieldLastUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_at", values[i])
			} else if value.Valid {
				n.LastUpdatedAt = value.String
			}
		case node.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				n.State = node.State(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Node.
// Note that you need to call Node.Unwrap() before calling this method if this Node
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Node) Update() *NodeUpdateOne {
	return (&NodeClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Node entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Node) Unwrap() *Node {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Node is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Node) String() string {
	var builder strings.Builder
	builder.WriteString("Node(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", public_key=")
	builder.WriteString(n.PublicKey)
	builder.WriteString(", public_disco_key=")
	builder.WriteString(n.PublicDiscoKey)
	builder.WriteString(", host_name=")
	builder.WriteString(n.HostName)
	builder.WriteString(", os=")
	builder.WriteString(n.Os)
	builder.WriteString(", goos=")
	builder.WriteString(n.Goos)
	builder.WriteString(", goarch=")
	builder.WriteString(n.Goarch)
	builder.WriteString(", last_updated_at=")
	builder.WriteString(n.LastUpdatedAt)
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", n.State))
	builder.WriteByte(')')
	return builder.String()
}

// Nodes is a parsable slice of Node.
type Nodes []*Node

func (n Nodes) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
