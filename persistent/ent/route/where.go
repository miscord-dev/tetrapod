// Code generated by entc, DO NOT EDIT.

package route

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/miscord-dev/toxfu/persistent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Addr applies equality check predicate on the "addr" field. It's identical to AddrEQ.
func Addr(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddr), v))
	})
}

// Bits applies equality check predicate on the "bits" field. It's identical to BitsEQ.
func Bits(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBits), v))
	})
}

// AddrEQ applies the EQ predicate on the "addr" field.
func AddrEQ(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddr), v))
	})
}

// AddrNEQ applies the NEQ predicate on the "addr" field.
func AddrNEQ(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddr), v))
	})
}

// AddrIn applies the In predicate on the "addr" field.
func AddrIn(vs ...string) predicate.Route {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddr), v...))
	})
}

// AddrNotIn applies the NotIn predicate on the "addr" field.
func AddrNotIn(vs ...string) predicate.Route {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddr), v...))
	})
}

// AddrGT applies the GT predicate on the "addr" field.
func AddrGT(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddr), v))
	})
}

// AddrGTE applies the GTE predicate on the "addr" field.
func AddrGTE(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddr), v))
	})
}

// AddrLT applies the LT predicate on the "addr" field.
func AddrLT(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddr), v))
	})
}

// AddrLTE applies the LTE predicate on the "addr" field.
func AddrLTE(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddr), v))
	})
}

// AddrContains applies the Contains predicate on the "addr" field.
func AddrContains(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddr), v))
	})
}

// AddrHasPrefix applies the HasPrefix predicate on the "addr" field.
func AddrHasPrefix(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddr), v))
	})
}

// AddrHasSuffix applies the HasSuffix predicate on the "addr" field.
func AddrHasSuffix(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddr), v))
	})
}

// AddrEqualFold applies the EqualFold predicate on the "addr" field.
func AddrEqualFold(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddr), v))
	})
}

// AddrContainsFold applies the ContainsFold predicate on the "addr" field.
func AddrContainsFold(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddr), v))
	})
}

// BitsEQ applies the EQ predicate on the "bits" field.
func BitsEQ(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBits), v))
	})
}

// BitsNEQ applies the NEQ predicate on the "bits" field.
func BitsNEQ(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBits), v))
	})
}

// BitsIn applies the In predicate on the "bits" field.
func BitsIn(vs ...int) predicate.Route {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBits), v...))
	})
}

// BitsNotIn applies the NotIn predicate on the "bits" field.
func BitsNotIn(vs ...int) predicate.Route {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBits), v...))
	})
}

// BitsGT applies the GT predicate on the "bits" field.
func BitsGT(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBits), v))
	})
}

// BitsGTE applies the GTE predicate on the "bits" field.
func BitsGTE(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBits), v))
	})
}

// BitsLT applies the LT predicate on the "bits" field.
func BitsLT(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBits), v))
	})
}

// BitsLTE applies the LTE predicate on the "bits" field.
func BitsLTE(v int) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBits), v))
	})
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.Node) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostTable, HostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		p(s.Not())
	})
}
