// Code generated by entc, DO NOT EDIT.

package node

import (
	"fmt"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPublicKey holds the string denoting the public_key field in the database.
	FieldPublicKey = "public_key"
	// FieldPublicDiscoKey holds the string denoting the public_disco_key field in the database.
	FieldPublicDiscoKey = "public_disco_key"
	// FieldHostName holds the string denoting the host_name field in the database.
	FieldHostName = "host_name"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldGoos holds the string denoting the goos field in the database.
	FieldGoos = "goos"
	// FieldGoarch holds the string denoting the goarch field in the database.
	FieldGoarch = "goarch"
	// FieldLastUpdatedAt holds the string denoting the last_updated_at field in the database.
	FieldLastUpdatedAt = "last_updated_at"
	// FieldEndpoints holds the string denoting the endpoints field in the database.
	FieldEndpoints = "endpoints"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeRoutes holds the string denoting the routes edge name in mutations.
	EdgeRoutes = "routes"
	// EdgeAddresses holds the string denoting the addresses edge name in mutations.
	EdgeAddresses = "addresses"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// RoutesTable is the table that holds the routes relation/edge.
	RoutesTable = "routes"
	// RoutesInverseTable is the table name for the Route entity.
	// It exists in this package in order to avoid circular dependency with the "route" package.
	RoutesInverseTable = "routes"
	// RoutesColumn is the table column denoting the routes relation/edge.
	RoutesColumn = "node_routes"
	// AddressesTable is the table that holds the addresses relation/edge.
	AddressesTable = "addresses"
	// AddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressesInverseTable = "addresses"
	// AddressesColumn is the table column denoting the addresses relation/edge.
	AddressesColumn = "node_addresses"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldPublicKey,
	FieldPublicDiscoKey,
	FieldHostName,
	FieldOs,
	FieldGoos,
	FieldGoarch,
	FieldLastUpdatedAt,
	FieldEndpoints,
	FieldState,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateOnline   State = "online"
	StateOffline  State = "offline"
	StateDisabled State = "disabled"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateOnline, StateOffline, StateDisabled:
		return nil
	default:
		return fmt.Errorf("node: invalid enum value for state field: %q", s)
	}
}
